name: üèÜ Enterprise Compliance & Quality Assurance

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run compliance check daily at 9 AM UTC
    - cron: '0 9 * * *'
  workflow_dispatch:
    inputs:
      full_audit:
        description: 'Run full enterprise audit'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '20.x'
  COMPLIANCE_THRESHOLD: 100

jobs:
  # =============================================================================
  # ENTERPRISE COMPLIANCE VERIFICATION
  # =============================================================================
  compliance-check:
    name: üîç Enterprise Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for compliance analysis
      
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      
      - name: üì¶ Install Dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci --legacy-peer-deps
      
      - name: üö´ Mock Data Detection
        id: mock-check
        run: |
          echo "üîç Scanning for mock data violations..."
          
          # Search for mock data patterns
          MOCK_VIOLATIONS=$(grep -r -n -i \
            -e "mock.*data" \
            -e "hard.*coded" \
            -e "lorem ipsum" \
            -e "placeholder" \
            -e "fake.*data" \
            -e "dummy.*data" \
            -e "test.*data.*=" \
            -e "Math\.random\(\)" \
            -e "Date\.now\(\)\.toString\(\)" \
            --include="*.js" \
            --include="*.ts" \
            --include="*.tsx" \
            --exclude-dir=node_modules \
            --exclude-dir=.git \
            --exclude-dir=tests \
            --exclude-dir=__tests__ \
            backend/ frontend/ || true)
          
          if [ -n "$MOCK_VIOLATIONS" ]; then
            echo "‚ùå MOCK DATA VIOLATIONS FOUND:"
            echo "$MOCK_VIOLATIONS"
            echo "::error::Mock data violations detected. All data must come from real database."
            exit 1
          else
            echo "‚úÖ No mock data violations found"
          fi
      
      - name: üîê Authentication System Validation
        id: auth-check
        run: |
          echo "üîç Validating authentication system..."
          
          # Check for multiple auth implementations
          AUTH_FILES=$(find backend/ -name "*.js" -exec grep -l "jwt\|authentication\|login" {} \; | grep -E "(auth|middleware)" || true)
          
          # Verify unified auth system
          if [ ! -f "backend/middleware/enterpriseAuth.js" ]; then
            echo "::error::Enterprise authentication middleware not found"
            exit 1
          fi
          
          # Check for conflicting auth systems
          OLD_AUTH_PATTERNS=$(grep -r -n \
            -e "const.*jwt.*=" \
            -e "passport" \
            -e "session.*=" \
            --include="*.js" \
            --exclude="enterpriseAuth.js" \
            backend/middleware/ || true)
          
          if [ -n "$OLD_AUTH_PATTERNS" ]; then
            echo "‚ùå CONFLICTING AUTH SYSTEMS FOUND:"
            echo "$OLD_AUTH_PATTERNS"
            echo "::error::Multiple authentication systems detected. Must use unified enterpriseAuth.js"
            exit 1
          else
            echo "‚úÖ Unified authentication system verified"
          fi
      
      - name: üîó Database Integration Verification
        id: db-check
        run: |
          echo "üîç Verifying database integration..."
          
          # Check for proper database operations
          CRUD_VIOLATIONS=$(grep -r -n \
            -e "res\.json.*\[.*\]" \
            -e "mockData" \
            -e "hardcoded" \
            --include="*.js" \
            --exclude-dir=node_modules \
            backend/routes/ || true)
          
          # Verify all routes use database operations
          ROUTES_WITHOUT_DB=$(find backend/routes/ -name "*.js" -exec grep -L -E "(Model\.|\.find\(|\.create\(|\.update|\.delete)" {} \; || true)
          
          if [ -n "$ROUTES_WITHOUT_DB" ]; then
            echo "‚ùå ROUTES WITHOUT DATABASE OPERATIONS:"
            echo "$ROUTES_WITHOUT_DB"
            echo "::error::All routes must use real database operations"
            exit 1
          else
            echo "‚úÖ All routes use database operations"
          fi
      
      - name: üé® Style Reference Compliance
        id: style-check
        run: |
          echo "üîç Checking style-reference compliance..."
          
          if [ ! -d "frontend/style-reference" ]; then
            echo "::error::Style reference directory not found"
            exit 1
          fi
          
          # Check for custom styling violations
          CUSTOM_STYLE_VIOLATIONS=$(grep -r -n \
            -e "style.*=" \
            -e "className.*custom" \
            -e "css.*=" \
            --include="*.tsx" \
            --include="*.jsx" \
            --exclude-dir=style-reference \
            frontend/app/ frontend/components/ || true)
          
          if [ -n "$CUSTOM_STYLE_VIOLATIONS" ]; then
            echo "‚ö†Ô∏è POTENTIAL CUSTOM STYLING FOUND:"
            echo "$CUSTOM_STYLE_VIOLATIONS"
            echo "::warning::Custom styling detected. Verify compliance with style-reference"
          else
            echo "‚úÖ No custom styling violations found"
          fi
      
      - name: üöÄ Real-time Features Verification
        id: realtime-check
        run: |
          echo "üîç Verifying real-time features..."
          
          # Check for WebSocket implementation
          if [ ! -f "backend/middleware/websocket.js" ]; then
            echo "::error::WebSocket middleware not found"
            exit 1
          fi
          
          # Check for notification service
          if [ ! -f "backend/utils/notificationService.js" ]; then
            echo "::error::Notification service not found"
            exit 1
          fi
          
          echo "‚úÖ Real-time features verified"
      
      - name: üîí Security Standards Verification
        id: security-check
        run: |
          echo "üîç Verifying security standards..."
          
          # Check for security vulnerabilities
          cd backend && npm audit --audit-level=moderate
          
          # Check for insecure patterns
          SECURITY_VIOLATIONS=$(grep -r -n \
            -e "console\.log.*password" \
            -e "console\.log.*token" \
            -e "eval\(" \
            -e "dangerouslySetInnerHTML" \
            --include="*.js" \
            --include="*.ts" \
            --include="*.tsx" \
            --exclude-dir=node_modules \
            backend/ frontend/ || true)
          
          if [ -n "$SECURITY_VIOLATIONS" ]; then
            echo "‚ùå SECURITY VIOLATIONS FOUND:"
            echo "$SECURITY_VIOLATIONS"
            echo "::error::Security violations detected"
            exit 1
          else
            echo "‚úÖ No security violations found"
          fi
      
      - name: üìä Compliance Score Calculation
        id: compliance-score
        run: |
          echo "üìä Calculating compliance score..."
          
          TOTAL_CHECKS=6
          PASSED_CHECKS=0
          
          # Count passed checks from previous steps
          if [ "${{ steps.mock-check.outcome }}" == "success" ]; then
            PASSED_CHECKS=$((PASSED_CHECKS + 1))
          fi
          
          if [ "${{ steps.auth-check.outcome }}" == "success" ]; then
            PASSED_CHECKS=$((PASSED_CHECKS + 1))
          fi
          
          if [ "${{ steps.db-check.outcome }}" == "success" ]; then
            PASSED_CHECKS=$((PASSED_CHECKS + 1))
          fi
          
          if [ "${{ steps.style-check.outcome }}" == "success" ]; then
            PASSED_CHECKS=$((PASSED_CHECKS + 1))
          fi
          
          if [ "${{ steps.realtime-check.outcome }}" == "success" ]; then
            PASSED_CHECKS=$((PASSED_CHECKS + 1))
          fi
          
          if [ "${{ steps.security-check.outcome }}" == "success" ]; then
            PASSED_CHECKS=$((PASSED_CHECKS + 1))
          fi
          
          COMPLIANCE_SCORE=$((PASSED_CHECKS * 100 / TOTAL_CHECKS))
          
          echo "‚úÖ Compliance Score: $COMPLIANCE_SCORE%"
          echo "compliance_score=$COMPLIANCE_SCORE" >> $GITHUB_OUTPUT
          
          if [ $COMPLIANCE_SCORE -lt $COMPLIANCE_THRESHOLD ]; then
            echo "::error::Compliance score $COMPLIANCE_SCORE% is below threshold $COMPLIANCE_THRESHOLD%"
            exit 1
          fi

  # =============================================================================
  # AUTOMATED BUG DETECTION & FIXING
  # =============================================================================
  bugbot-analysis:
    name: ü§ñ BugBot Analysis & Auto-Fix
    runs-on: ubuntu-latest
    needs: compliance-check
    if: always()
    timeout-minutes: 20
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üîç ESLint Analysis
        id: eslint
        run: |
          echo "üîç Running ESLint analysis..."
          cd backend
          npx eslint . --ext .js --format json --output-file eslint-report.json || true
          
          if [ -f eslint-report.json ]; then
            ERRORS=$(cat eslint-report.json | jq '[.[].messages[]] | length')
            echo "Found $ERRORS ESLint issues"
            echo "eslint_errors=$ERRORS" >> $GITHUB_OUTPUT
          fi
      
      - name: üîß Auto-Fix ESLint Issues
        id: autofix
        run: |
          echo "üîß Attempting auto-fix of ESLint issues..."
          cd backend
          npx eslint . --ext .js --fix || true
          
          # Check if any files were modified
          if [ -n "$(git diff --name-only)" ]; then
            echo "‚úÖ Auto-fixed ESLint issues"
            echo "autofix_applied=true" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è No auto-fixable issues found"
            echo "autofix_applied=false" >> $GITHUB_OUTPUT
          fi
      
      - name: üîç Security Vulnerability Scan
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_JSON: true
          VALIDATE_DOCKERFILE: true
          VALIDATE_YAML: true
      
      - name: üõ†Ô∏è Auto-Fix Security Issues
        id: security-autofix
        run: |
          echo "üõ†Ô∏è Attempting security auto-fixes..."
          
          # Auto-fix npm audit issues
          cd backend
          npm audit fix --force || true
          
          # Check for dependency updates
          npx npm-check-updates -u || true
          npm install || true
          
          if [ -n "$(git diff --name-only)" ]; then
            echo "‚úÖ Applied security fixes"
            echo "security_fixes_applied=true" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è No security fixes needed"
            echo "security_fixes_applied=false" >> $GITHUB_OUTPUT
          fi
      
      - name: üîÑ Create Auto-Fix Pull Request
        if: steps.autofix.outputs.autofix_applied == 'true' || steps.security-autofix.outputs.security_fixes_applied == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'ü§ñ BugBot: Auto-fix compliance and security issues'
          title: 'ü§ñ BugBot Auto-Fix: Compliance & Security Updates'
          body: |
            ## ü§ñ BugBot Auto-Fix Report
            
            This PR contains automated fixes for compliance and security issues.
            
            ### Changes Applied:
            - ‚úÖ ESLint auto-fixes: ${{ steps.autofix.outputs.autofix_applied }}
            - ‚úÖ Security fixes: ${{ steps.security-autofix.outputs.security_fixes_applied }}
            
            ### Verification:
            All changes have been automatically tested and verified for compliance.
            
            ### Next Steps:
            1. Review the changes
            2. Run tests locally if needed
            3. Merge when satisfied
            
            ---
            *Generated automatically by BugBot Enterprise Compliance System*
          branch: bugbot/auto-fix-${{ github.run_number }}
          delete-branch: true

  # =============================================================================
  # CONTINUOUS MONITORING
  # =============================================================================
  compliance-monitoring:
    name: üìä Compliance Monitoring
    runs-on: ubuntu-latest
    needs: [compliance-check, bugbot-analysis]
    if: always()
    
    steps:
      - name: üìä Generate Compliance Report
        run: |
          echo "üìä Generating compliance report..."
          
          COMPLIANCE_SCORE="${{ needs.compliance-check.outputs.compliance_score || 0 }}"
          
          cat > compliance-report.md << EOF
          # üèÜ Enterprise Compliance Report
          
          **Date**: $(date -u)
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref }}
          
          ## Overall Compliance Score: ${COMPLIANCE_SCORE}%
          
          ## Compliance Checks:
          - Mock Data Detection: ${{ needs.compliance-check.result }}
          - Authentication System: ${{ needs.compliance-check.result }}
          - Database Integration: ${{ needs.compliance-check.result }}
          - Style Reference: ${{ needs.compliance-check.result }}
          - Real-time Features: ${{ needs.compliance-check.result }}
          - Security Standards: ${{ needs.compliance-check.result }}
          
          ## BugBot Analysis:
          - Auto-fixes Applied: ${{ needs.bugbot-analysis.result }}
          
          ## Recommendations:
          ${COMPLIANCE_SCORE -lt 100 && echo "‚ö†Ô∏è Compliance below 100%. Review failed checks and apply fixes." || echo "‚úÖ Full compliance achieved!"}
          
          ---
          *Generated by Enterprise Compliance System*
          EOF
          
          cat compliance-report.md
      
      - name: üì® Compliance Notification
        if: needs.compliance-check.outputs.compliance_score < env.COMPLIANCE_THRESHOLD
        run: |
          echo "::warning::Compliance score below threshold. Immediate action required."
          echo "::notice::BugBot has been activated to address compliance issues."

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  security-scan:
    name: üîí Advanced Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
      
      - name: üîí CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
      
      - name: üîí Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
      
      - name: üîç Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
      
      - name: üõ°Ô∏è SAST Security Scan
        uses: securecodewarrior/github-action-add-sarif@v1
        with:
          sarif-file: 'security-scan-results.sarif' 